from datasets import load_dataset
from transformers import CLIPProcessor, CLIPModel
from PIL import Image
import torch
from huggingface_hub import Repository

# Cargar el modelo y procesador CLIP
model_name = "openai/clip-vit-base-patch32"
model = CLIPModel.from_pretrained(model_name)
processor = CLIPProcessor.from_pretrained(model_name)

# Cargar el dataset de Hugging Face
dataset_name = "Jasshl/living_room"
dataset = load_dataset(dataset_name, split="train")

# Obtener embeddings de las imágenes del dataset
def get_dataset_embeddings(dataset):
    image_embeddings = []
    image_files = []

    for example in dataset:
        try:
            image = example["image"]
            inputs = processor(images=image, return_tensors="pt")
            with torch.no_grad():
                embedding = model.get_image_features(**inputs)

            image_embeddings.append(embedding)
            image_files.append(image.filename if hasattr(image, "filename") else "unknown")
        except Exception as e:
            print(f"Error procesando la imagen: {e}")
            continue
    
    # Verificar que haya embeddings procesados
    if not image_embeddings:
        raise ValueError("No se generaron embeddings. Verifica el dataset o el procesamiento.")
    
    return torch.cat(image_embeddings), image_files

# Generar embeddings para el dataset
print("Procesando imágenes del dataset...")
image_embeddings, image_files = get_dataset_embeddings(dataset)

# Guardar embeddings en Hugging Face Hub
def save_to_huggingface(repo_name, tensor, filename="embeddings.pth"):
    # Clonar el repositorio Hugging Face localmente
    repo = Repository(local_dir=repo_name, clone_from=f"albertoyesares/{repo_name}")
    repo.git_pull()  # Asegúrate de tener la versión más actualizada del repo
    
    # Guardar el tensor localmente dentro del repositorio clonado
    filepath = f"{repo_name}/{filename}"
    torch.save(tensor, filepath)
    print(f"Embeddings guardados localmente en: {filepath}")
    
    # Subir los cambios al repositorio en Hugging Face
    repo.push_to_hub(commit_message=f"Subida de {filename}")
    print(f"Embeddings subidos correctamente al repositorio: albertoyesares/{repo_name}")

# Preparar los datos para guardar
tensor_data = {'embeddings': image_embeddings, 'images': image_files}

# Llamar a la función para guardar en el Hub
save_to_huggingface("model_pf", tensor_data, filename="embeddings.pth")
